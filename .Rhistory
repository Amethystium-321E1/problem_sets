performance_diff_d |>
ggplot(aes(x=ConfrontationalGame, y=ImprovementScore, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_d |>
ggplot(aes(x=ConfrontationalGame, y=ImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_d |>
ggplot(aes(x=ConfrontationalGame, y=ImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="summary", fun = mean) +
scale_fill_brewer(palette="Set1")
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore))
performance_summary_d |>
ggplot(aes(x=ConfrontationalGame, y=ImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_summary_d |>
ggplot(aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_summary_d
performance_summary_d
n <- length(unique(performance_diff_d$Subject))
n_subj <- length(unique(performance_diff_d$Subject))
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore),
SE = sd(ImprovementScore)/n_subj)
performance_summary_d
?geom_errorbar
performance_summary_d |>
ggplot(aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore-SE, ymax=MeanImprovementScore+SE), width=.2,
position=position_dodge(.9))
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
unique(d$Game1Angry1)
filtered_d = filtered_d |>
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
unique(d$Game1Angry1)
tail(d)
filtered_d = d |>
filter(is.na(DoNotUse))
filtered_d
# your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = filtered_d |>
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) |>
select(-contains("Game")) # your code here: remove the columns containing "Game" in the name
performance_hyp_d
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d |> pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d |>
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d |>
pivot_longer(cols=-c("Subject", "Cond"),
names_to="Measurement",
values_to="Rating")
## your code here
head(rating_hyp_long_d)
tiny_demo_mutate <- head(performance_hyp_long_d, 10)
tiny_demo_mutate = tiny_demo_mutate |>
mutate(
)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
Cond = ifelse(Cond > 3, Cond - 3, Cond),
# Get rid of uninterpretable condition labels
MusicCondition = factor(Cond, levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
# Note: You can also do steps 3 and 4 (Cond and MusicCondition) in one step with the following:
# MusicCondition = factor(ifelse(Cond > 3, Cond - 3, Cond),
#                         levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
# Instead of passing in the already-modified "Cond" column, this changes the Cond values and then uses
# those changed values to create the Music Condition levels.
# I prefer to go one step at a time for readability and teaching purposes, but I figured I would mention!
View(rating_hyp_long_d)
rating_hyp_long_d = rating_hyp_long_d |>
mutate(
IsRecall = grepl("Friends|Strangers", Measurement)
)
# your code here
rating_hyp_long_d = rating_hyp_long_d |>
mutate(
# Pulls out the game number
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
# We can then use that new GameNumber Column right away
# Games 1 and 2 are confrontational, Games 3 and 4 are not
ConfrontationalGame = GameNumber <= 2,
# Now that we have added the game number and whether it is confrontational elsewhere,
# we can just pull out the emotion! Let's do it in two steps:
# Grab the string of emotions
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
# Clean up annoying labeling using TWO ifelse statements
# The data uses "Excited" and "Exciting" to describe the same music
# Similar with "Calm" and "Neutral"
Emotion = ifelse(Emotion == "Excited", "Exciting",
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d |>
group_by(ConfrontationalGame, WithMusic) |>
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d |>
group_by(ConfrontationalGame, WithMusic) |> # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) |>
ungroup()
View(performance_hyp_long_d)
rating_summary_d = rating_hyp_long_d |>
group_by(ConfrontationalGame, Emotion) |>
mutate(MeanRating = mean(Rating, na.rm=T)) |>
summarize(rating_summary_d = scale(MeanRating)) |>
ungroup(
)
## your code here
rating_summary_d
rating_summary_d = rating_hyp_long_d |>
group_by(ConfrontationalGame, Emotion) |>
summarize(MeanRating = mean(Rating, na.rm=T)) |>
ungroup()
## your code here
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_d = performance_hyp_long_d |>
# re-label variable so code is easier to read
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) |>
# now we remove columns we don't need (why might this be?)
select(-c("Score", "Measurement")) |>
pivot_wider(names_from=WithMusic,
values_from=z_scored_performance) |>
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T))
# your code here
performance_summary_d
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = scale(mean(ImprovementScore, na.rm=T)))
# your code here
performance_summary_d
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(scale(ImprovementScore, na.rm=T)))
performance_summary_d
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T))
# your code here
performance_summary_d
rating_summary_d
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T))
# your code here
performance_summary_d
performance_summary_d_ |> rating_summary_d + performance_summary_d
performance_summary_d_ = performance_summary_d |>
mutate(MeanImprovementScore = MeanImprovementScore + rating_summary_d$MeanRating)
ggplot(performance_summary_d, aes(x = MusicCondition, y = MeanImprovementScore, fill = ConfrontationalGame)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Mean Improvement Score by Game Type and Music Condition",
x = "Music Condition",
y = "Mean Improvement Score") +
theme_minimal()
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) |>
ungroup()
# your code here
performance_summary_d
ggplot(performance_summary_d, aes(x = MusicCondition, y = MeanImprovementScore, fill = ConfrontationalGame)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Mean Improvement Score by Game Type and Music Condition",
x = "Music Condition",
y = "Mean Improvement Score") +
theme_minimal()
ggplot(performance_summary_d, aes(x = MusicCondition, y = MeanImprovementScore, fill = ConfrontationalGame)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Mean Improvement Score by Game Type and Music Condition",
x = "Music Condition",
y = "Mean Improvement Score") +
theme_minimal()
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
unique(d$Game1Angry1)
tail(d)
filtered_d = d |>
filter(is.na(DoNotUse))
filtered_d
# your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = filtered_d |>
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) |>
select(-contains("Game")) # your code here: remove the columns containing "Game" in the name
performance_hyp_d
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d |> pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d |>
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d |>
pivot_longer(cols=-c("Subject", "Cond"),
names_to="Measurement",
values_to="Rating")
## your code here
head(rating_hyp_long_d)
tiny_demo_mutate <- head(performance_hyp_long_d, 10)
tiny_demo_mutate = tiny_demo_mutate |>
mutate(
)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
Cond = ifelse(Cond > 3, Cond - 3, Cond),
# Get rid of uninterpretable condition labels
MusicCondition = factor(Cond, levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
# Note: You can also do steps 3 and 4 (Cond and MusicCondition) in one step with the following:
# MusicCondition = factor(ifelse(Cond > 3, Cond - 3, Cond),
#                         levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
# Instead of passing in the already-modified "Cond" column, this changes the Cond values and then uses
# those changed values to create the Music Condition levels.
# I prefer to go one step at a time for readability and teaching purposes, but I figured I would mention!
rating_hyp_long_d = rating_hyp_long_d |>
mutate(
IsRecall = grepl("Friends|Strangers", Measurement)
)
# your code here
rating_hyp_long_d = rating_hyp_long_d |>
mutate(
# Pulls out the game number
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
# We can then use that new GameNumber Column right away
# Games 1 and 2 are confrontational, Games 3 and 4 are not
ConfrontationalGame = GameNumber <= 2,
# Now that we have added the game number and whether it is confrontational elsewhere,
# we can just pull out the emotion! Let's do it in two steps:
# Grab the string of emotions
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
# Clean up annoying labeling using TWO ifelse statements
# The data uses "Excited" and "Exciting" to describe the same music
# Similar with "Calm" and "Neutral"
Emotion = ifelse(Emotion == "Excited", "Exciting",
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d |>
group_by(ConfrontationalGame, WithMusic) |>
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d |>
group_by(ConfrontationalGame, WithMusic) |> # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) |>
ungroup()
rating_summary_d = rating_hyp_long_d |>
group_by(ConfrontationalGame, Emotion) |>
summarize(MeanRating = mean(Rating, na.rm=T)) |>
ungroup()
## your code here
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_d = performance_hyp_long_d |>
# re-label variable so code is easier to read
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) |>
# now we remove columns we don't need (why might this be?)
select(-c("Score", "Measurement")) |>
pivot_wider(names_from=WithMusic,
values_from=z_scored_performance) |>
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) |>
ungroup()
# your code here
performance_summary_d
ggplot(performance_summary_d, aes(x = MusicCondition, y = MeanImprovementScore, fill = ConfrontationalGame)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Mean Improvement Score by Game Type and Music Condition",
x = "Music Condition",
y = "Mean Improvement Score") +
theme_minimal()
performance_SEM_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarise(
MeanImprovementScore = mean(ImprovementScore),
StandardDeviation = sd(ImprovementScore),
n = n(),
StandardErrorMean = StandardDeviation / sqrt(n)
)
performance_SEM_d
ggplot(performance_SEM_d, aes(x = MusicCondition, y = MeanImprovementScore, fill = ConfrontationalGame)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanImprovementScore - StandardErrorMean, ymax = MeanImprovementScore + StandardErrorMean),
position = position_dodge(0.9), width = 0.25) +
labs(title = "Mean Improvement Score by Game Type and Music Condition",
x = "Music Condition",
y = "Mean Improvement Score") +
theme_minimal()
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
unique(d$Game1Angry1)
tail(d)
filtered_d = d |>
filter(is.na(DoNotUse))
filtered_d
# your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = filtered_d |>
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) |>
select(-contains("Game")) # your code here: remove the columns containing "Game" in the name
performance_hyp_d
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d |> pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d |>
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d |>
pivot_longer(cols=-c("Subject", "Cond"),
names_to="Measurement",
values_to="Rating")
## your code here
head(rating_hyp_long_d)
tiny_demo_mutate <- head(performance_hyp_long_d, 10)
tiny_demo_mutate = tiny_demo_mutate |>
mutate(
)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
Cond = ifelse(Cond > 3, Cond - 3, Cond),
# Get rid of uninterpretable condition labels
MusicCondition = factor(Cond, levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
# Note: You can also do steps 3 and 4 (Cond and MusicCondition) in one step with the following:
# MusicCondition = factor(ifelse(Cond > 3, Cond - 3, Cond),
#                         levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
# Instead of passing in the already-modified "Cond" column, this changes the Cond values and then uses
# those changed values to create the Music Condition levels.
# I prefer to go one step at a time for readability and teaching purposes, but I figured I would mention!
rating_hyp_long_d = rating_hyp_long_d |>
mutate(
IsRecall = grepl("Friends|Strangers", Measurement)
)
# your code here
rating_hyp_long_d = rating_hyp_long_d |>
mutate(
# Pulls out the game number
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
# We can then use that new GameNumber Column right away
# Games 1 and 2 are confrontational, Games 3 and 4 are not
ConfrontationalGame = GameNumber <= 2,
# Now that we have added the game number and whether it is confrontational elsewhere,
# we can just pull out the emotion! Let's do it in two steps:
# Grab the string of emotions
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
# Clean up annoying labeling using TWO ifelse statements
# The data uses "Excited" and "Exciting" to describe the same music
# Similar with "Calm" and "Neutral"
Emotion = ifelse(Emotion == "Excited", "Exciting",
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d |>
group_by(ConfrontationalGame, WithMusic) |>
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d |>
group_by(ConfrontationalGame, WithMusic) |> # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) |>
ungroup()
rating_summary_d = rating_hyp_long_d |>
group_by(ConfrontationalGame, Emotion) |>
summarize(MeanRating = mean(Rating, na.rm=T)) |>
ungroup()
## your code here
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_d = performance_hyp_long_d |>
# re-label variable so code is easier to read
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) |>
# now we remove columns we don't need (why might this be?)
select(-c("Score", "Measurement")) |>
pivot_wider(names_from=WithMusic,
values_from=z_scored_performance) |>
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) |>
ungroup()
# your code here
performance_summary_d
ggplot(performance_summary_d, aes(x = MusicCondition, y = MeanImprovementScore, fill = ConfrontationalGame)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Mean Improvement Score by Game Type and Music Condition",
x = "Music Condition",
y = "Mean Improvement Score") +
theme_minimal()
performance_SEM_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarise(
MeanImprovementScore = mean(ImprovementScore),
StandardDeviation = sd(ImprovementScore),
n = n(),
StandardErrorMean = StandardDeviation / sqrt(n)
)
performance_SEM_d
ggplot(performance_SEM_d, aes(x = MusicCondition, y = MeanImprovementScore, fill = ConfrontationalGame)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanImprovementScore - StandardErrorMean, ymax = MeanImprovementScore + StandardErrorMean),
position = position_dodge(0.9), width = 0.25) +
labs(title = "Mean Improvement Score by Game Type and Music Condition",
x = "Music Condition",
y = "Mean Improvement Score") +
theme_minimal()
